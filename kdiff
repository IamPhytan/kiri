#!/bin/bash

#set -x
#set -e

readlink_osx()
{
	target_file="$1"

	cd $(dirname "$target_file")
	target_file=$(basename "$target_file")

	# Iterate down a (possible) chain of symlinks
	while [ -L "$target_file" ]
	do
		target_file=$(readlink "$target_file")
		cd "$(dirname "$target_file")"
		target_file=$(basename "$target_file")
	done

	# Compute the canonicalized name by finding the physical path
	# for the directory we're in and appending the target file.
	phys_dir=$(pwd -P)

	result="$phys_dir/$target_file"

	echo "$result"
}

readlink_()
{
	case $OSTYPE in
		darwin*)
			readlink_osx "$1"
			;;
		*)
			readlink -f "$1"
			;;
	esac
}

tac_()
{
	case $OSTYPE in
		darwin*)
			tail -r
		;;
		*)
			tac
		;;
	esac
}

sed_()
{
	case $OSTYPE in
		darwin*)
			gsed "$@"
			;;
		*)
			sed "$@"
			;;
	esac
}

find_()
{
	case $OSTYPE in
		darwin*)
			gfind "$@"
			;;
		*)
			find "$@"
			;;
	esac
}

xdg-open_()
{
	echo "Launching $1"
	case $OSTYPE in
		darwin*)
			open "$1" &
		;;
		*)
			xdg-open "$1" 2> /dev/null &
		;;
	esac
}

ctrl_c()
{
	echo "** Trapped CTRL-C"
	exit 1
}

insert_pages()
{
	html="$1"
	pages="$2"

	# FORMAT
	# pagename|pageId

	n=0

	PAGES_LIST_HTML=""

	IFS=$'\n'
	for page in $pages; do

		echo "$page"

		page_name=$(echo "$page" | cut -d'|' -f1 | sed_ "s/^ //g" | sed_ "s/[ t]\+//g")
		page_id=$(echo "$page" | cut -d'|' -f2 | sed_ "s/^ //g")

		if [[ $n == 0 ]]; then
			checked="checked='checked'"
		else
			checked=""
		fi

		read -r -d '' PAGE_HTML <<-EOM
			<input type="radio" id="${page_id}" value="${page_id}" name="layers" ${checked} onchange="change_page()"/>
			<label class="rounded text-sm-left list-group-item radio-box" for="${page_id}">
			<span style="margin-left:0.5em; margin-right:0.1em;" class="iconify" data-icon="gridicons:pages" data-inline="false"></span>
			${page_name}
			</label>
		EOM

		n=$((n+1))

		PAGES_LIST_HTML="${PAGES_LIST_HTML}${PAGE_HTML}"

	done

	contents=$(<"$html")
	new_contents=${contents//"<!-- FILL_PAGES_HERE -->"/${PAGES_LIST_HTML}}
	printf '%s' "$new_contents" > "$html"
}

insert_commits()
{
	html="$1"
	commits="$2"

	# GIT COMMITS FORMAT
	#
	# fcd81ef | 2021-01-22 17:21:39 -0300 | Leandro Heck | Initial version
	# d20b900 | 2021-01-22 16:59:29 -0300 | Leandro Heck | Initial commit

	n=0

	COMMITS_LIST_HTML=""

	IFS=$'\n'
	for commit in $commits; do

		hash=$(echo "$commit" | cut -d'|' -f1 | sed_ "s/^ //g" | sed_ "s/[ t]\+//g" )
		date=$(echo "$commit" | cut -d'|' -f2 | cut -d' ' -f1-2 | sed_ "s/^ //g" )
		user=$(echo "$commit" | cut -d'|' -f3 | sed_ "s/^ //g" )
		 msg=$(echo "$commit" | cut -d'|' -f4 | sed_ "s/^ //g" )

		# check for changes in .sch files
		if git log --name-only --pretty='format:' -1 -U "${hash}" | cat | grep -s ".sch" &> /dev/null; then
			sch_icon='<span class="iconify" style="width: 14px; height: 14px; color: #A6E22E;" data-icon="carbon:schematics" data-inline="false"></span>'
		fi

		# check for changes in .kicad_pcb files
		if git log --name-only --pretty='format:' -1 -U "${hash}" | cat | grep -s ".kicad_pcb" &> /dev/null; then
			layout_icon='<span class="iconify" style="width: 14px; height: 14px; color: #F92672;" data-icon="codicon:circuit-board" data-inline="false"></span>'
		fi

		# check for changes in textual files
		if git log --name-only --pretty='format:' -1 -U "${hash}" | cat | grep -s -vE ".sch|.kicad_pcb" &> /dev/null; then
			text_icon='<span class="iconify" style="width: 14px; height: 14px; color: #888888;" data-icon="bi:file-earmark-text" data-inline="false"></span>'
		fi

		if [[ $n == 0 ]] || [[ $n == 1 ]]; then
			checked="checked='checked'"
		else
			checked=""
		fi

		read -r -d '' COMMIT_HTML <<-EOM
		    <input class="chkGroup" type="checkbox" id="${hash}" name="commit" value="${hash}" ${checked} onchange="update_commits()"/>
		    <label class="text-sm-left list-group-item" for="${hash}">
		      <table style="width:100%">
		        <tr>
		          <td rowspan=2 style="vertical-align: top; width: 1.8em;">
		              <svg viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" width="15" height="15">
		                  <path d="M7.5 10.5a3 3 0 010-6m0 6a3 3 0 000-6m0 6V15m0-10.5V0" stroke="currentColor"></path>
		              </svg>
		            </td>
		          <td><em class="text-info"style="">${msg}</em></td>
		        </tr>
		        <tr>
		          <td><span class="text-success text-uppercase font-weight-normal">${hash}</span> <span class="text-muted"> | ${date} | ${user} | </span> ${sch_icon} ${layout_icon} ${text_icon}</td>
		        </tr>
		      </table>
		    </label>
		EOM

		n=$((n+1))

		COMMITS_LIST_HTML="${COMMITS_LIST_HTML}${COMMIT_HTML}"

	done

	contents=$(<"$html")
	new_contents=${contents//"<!-- FILL_COMMITS_HERE -->"/${COMMITS_LIST_HTML}}
	printf '%s' "$new_contents" > "$html"
}


show_commits()
{
	commits="$1"

	IFS=$'\n'
	for commit in $commits; do
		echo "$commit"
	done
}

fix_urls_multi_project()
{
	html_file=$1
	project=$2

	sed_ -i "s|/web/main.html|/$project/web/main.html|g" "$html_file"
}

generate_comparisons()
{
	script_path=$1
	kicad_pcb=$2
	project=$3

	filename=$(basename -- "$kicad_pcb")
	# extension="${filename##*.}"
	board_name="${filename%.*}"

	if [[ $project == "" ]]; then
		output_folder="kidiff"
	else
		output_folder="kidiff/$project"
	fi

	if [[ "$REMOVE_KDIFF_FOLDER" == "1" ]]; then
		rm -rf "${output_folder}"
	fi

	mkdir -p "${output_folder}/web/"
	mkdir -p "${output_folder}/diff/"

	if [[ "$ALL_COMMITS" == "0" ]]; then
		commits=$(git log --date=local '--pretty=format:%h | %ai | %an | %s' "$kicad_pcb" "*.sch")
	else
		commits=$(git log --date=local '--pretty=format:%h | %ai | %an | %s')
	fi

	a=$(echo "$commits" | tac_ | cut -d' '  -f1);
	b=$a

	IFS=$'\n'

	na=$(echo "$a" | wc -w)
	nb=$(echo "$b" | wc -w)
	nab=$(echo "${na} * (${nb} - 1) " | bc)

	echo
	echo "Generating ${nab} comparisons"
	echo

	n=0
	for i in $a; do

		k=0

		for j in $b; do

			if [[ "$i" != "$j" ]]; then

				k=$((k+1))
				n=$((n+1))

				if [[ -d "${output_folder}/$j" ]]; then
					skipping=", skipping..."
				else
					skipping=""
				fi

				if [[ $k == 1 ]]; then
					printf "%4d. %s - %s%s\n" "$n" "$i" "$j" "$skipping"
				else
					printf "%4d. %s - %s%s \n" "$n" "       " "$j" "$skipping"
				fi


				# Check if diff file exists
				if [[ -d "${output_folder}/$j" ]]; then
					continue
				fi

				# ====

				cmd="kidiff $kicad_pcb --webserver-disable -a $i -b $j > /dev/null"
				if [[ "$VERBOSE" == 1 ]]; then
					echo "$cmd"
				fi
				eval "$cmd"

				if [ -f "${output_folder}/diff.txt" ]; then
					mv -f "${output_folder}/diff.txt" "${output_folder}/diff/$i-$j.txt"
				fi

				# ====

				REMOVED="FF0000"
				ADDED="008FFF"
				UNCHANGED="FFFFFF"
				BACKGROUND="222222"

				# Custom version does not use -kidiff
				cmd="plotgitsch -l ${board_name}-cache.lib -c ${REMOVED}:${ADDED}:${UNCHANGED}:${BACKGROUND} ${i} ${j} > /dev/null"
				if [[ "$VERBOSE" == 1 ]]; then
					echo "$cmd"
				fi
				eval "$cmd"

				# Add image if missing
				if [[ ! -f sch1.svg ]]; then
					cp -f "${script_path}/blank.svg" sch1.svg
				fi

				# Add image if missing
				if [[ ! -f sch2.svg ]]; then
					cp -f "${script_path}/blank.svg" sch2.svg
				fi

				if [ -f sch1.svg ]; then
					# Background transparent
					sed_ -i 's/fill="#222222"/fill="#22222200"/g' sch1.svg
					sed_ -i 's/fill="#FFFFFF"/fill="#FFFFFF00"/g' sch1.svg
					# Elements in black
					sed_ -i 's/fill="#FF0000"/fill="#000000FF"/g' sch1.svg
					sed_ -i 's/fill="#00FF00"/fill="#000000FF"/g' sch1.svg
					sed_ -i 's/stroke="#800000"/stroke="#000000FF"/g' sch1.svg
					mkdir -p "${output_folder}/$i/"
					mv -f sch1.svg "${output_folder}/$i/sch.svg"
					# Work in progress - extra schematic pages
					mv -f "sch-1-*.svg" "${output_folder}/$i/"
				fi

				if [ -f sch2.svg ]; then
					# Background transparent
					sed_ -i 's/fill="#222222"/fill="#22222200"/g' sch2.svg
					sed_ -i 's/fill="#FFFFFF"/fill="#FFFFFF00"/g' sch2.svg
					# Elements in black
					sed_ -i 's/fill="#FF0000"/fill="#000000FF"/g' sch2.svg
					sed_ -i 's/fill="#00FF00"/fill="#000000FF"/g' sch2.svg
					sed_ -i 's/stroke="#800000"/stroke="#000000FF"/g' sch2.svg
					mkdir -p "${output_folder}/$j/"
					mv -f sch2.svg "${output_folder}/$j/sch.svg"
					# Work in progress - extra schematic pages
					mv -f "sch-2-*.svg" "${output_folder}/$j/"
				fi

				if [ -f sch-diff.svg ]; then
					rm -rf sch-diff.svg
				fi
			fi
		done
	done

	# Copy assets
	cp -f "${script_path}/main.html" "${output_folder}/web/main.html"
	cp -f "${script_path}/kdiff.css" "${output_folder}/web/"
	cp -f "${script_path}/kdiff.js"  "${output_folder}/web/"
	cp -f "${script_path}/blank.svg" "${output_folder}/"

	insert_commits "${output_folder}/web/main.html" "$commits"

	# TODO: How to get pages of the Kicad project here?
	pages=$(find_ -name "*.sch" -printf "%f\n")
	insert_pages "${output_folder}/web/main.html" "$pages"

	# Update board title
	title=$(grep -i "(title " -R "${kicad_pcb}" | cut -d"\"" -f 2)
	sed_ -i "s|\[PROJECT_TITLE\]|${title}|g" "${output_folder}/web/main.html"

	commit1=$(echo "$commits" | head -n1 | tail -n1 | cut -d" " -f1)
	commit2=$(echo "$commits" | head -n2 | tail -n1 | cut -d" " -f1)

	# Update board name
	sed_ -i "s|var board_name =.*|var board_name = \"${board_name}\"; // generated by kdiff script |g" "${output_folder}/web/kdiff.js"

	# Update initial schematic images
	sed_ -i "s|\[INITIAL_COMMIT_1_SCH\]|../${commit1}/sch.svg|g" "${output_folder}/web/main.html"
	sed_ -i "s|\[INITIAL_COMMIT_2_SCH\]|../${commit2}/sch.svg|g" "${output_folder}/web/main.html"

	# Update initial layout images
	sed_ -i "s|\[INITIAL_COMMIT_1_PCB\]|../${commit1}/${board_name}-F_Cu.svg|g" "${output_folder}/web/main.html"
	sed_ -i "s|\[INITIAL_COMMIT_2_PCB\]|../${commit2}/${board_name}-F_Cu.svg|g" "${output_folder}/web/main.html"
}


# ====================================================================
# ====================================================================


script=$(readlink_ "$0")
script_path=$(dirname "$script")

# Make sure gitplotsch is in the PATH
eval "$(opam config env)"

trap ctrl_c INT

ALL_COMMITS=0
REMOVE_KDIFF_FOLDER=0
VERBOSE=0

# Arguments
# -a : use all commits (slower)
# -r : remove kidiff folder before run
# -p : set nested project path
# -v : verbose

while [[ $# -gt 0 ]]
do
key="$1"

case $key in
    -a)
        ALL_COMMITS=1
        shift
        ;;

    -r)
        REMOVE_KDIFF_FOLDER=1
        shift
        ;;

    -p)
        project_folder="$2"
        shift
        shift
        ;;

    -v)
        VERBOSE=1
        shift
        ;;

    *)
        kicad_pcb="$1"
        shift # past argument
        ;;
esac
done

# Run it from git root (get the project path automatically)
# Pass git .pro file instead of the board

generate_comparisons "$script_path" "$kicad_pcb" "$project_folder"
xdg-open_ "${output_folder}/web/main.html"
