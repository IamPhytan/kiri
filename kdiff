#!/bin/bash

# set -x
# set -e

show_help()
{
	read -r -d '' HELP_MESSAGE <<-EOM

	USAGE :

	    kdiff [OPTIONS] KICAD_PCB

	OPTIONS:

	    -a          Track all commits (slower). By default it looks only commits related with *.kicad_pcb and *.sch files
	    -c [c1 c2]  Limit scope of commits between commit c1 and c2. It can be used with -a
	    -p [path]   Set nested project path
	    -r          Remove kidiff folder before run
	    -v          Verbose
	    -h          This help

	EXAMPLES:

	    # Kicad project on the root of the repo
	    kdiff board.kicad_pcb

	    # Nested Kicad projects
		cd power-panel; kdiff board.kicad_pcb -p power-panel -r -v

	EOM

	echo -e "\n$HELP_MESSAGE\n"
}

readlink_osx()
{
	target_file="$1"

	cd $(dirname "$target_file") || exit
	target_file=$(basename "$target_file")

	# Iterate down a (possible) chain of symlinks
	while [ -L "$target_file" ]
	do
		target_file=$(readlink "$target_file")
		cd "$(dirname "$target_file")" || exit
		target_file=$(basename "$target_file")
	done

	# Compute the canonicalized name by finding the physical path
	# for the directory we're in and appending the target file.
	phys_dir=$(pwd -P)

	result="$phys_dir/$target_file"

	echo "$result"
}

readlink_()
{
	case $OSTYPE in
		darwin*)
			readlink_osx "$1"
			;;
		*)
			readlink -f "$1"
			;;
	esac
}

tac_()
{
	case $OSTYPE in
		darwin*)
			tail -r
		;;
		*)
			tac
		;;
	esac
}

sed_()
{
	case $OSTYPE in
		darwin*)
			gsed "$@"
			;;
		*)
			sed "$@"
			;;
	esac
}

find_()
{
	case $OSTYPE in
		darwin*)
			gfind "$@"
			;;
		*)
			find "$@"
			;;
	esac
}

xdg-open_()
{
	echo "Launching $1"
	case $OSTYPE in
		darwin*)
			open "$1" &
		;;
		*)
			xdg-open "$1" 2> /dev/null &
		;;
	esac
}

ctrl_c()
{
	echo "** Trapped CTRL-C"
	exit 1
}

get_pages()
{
	board_name=$1
	main_schematic=$2

	# First page is this one, name is Root on Kicad, here is the $board_name
	pages="${board_name}|${main_schematic}"

	pagenames=$(grep "^F0 " "${main_schematic}" | cut -d" " -f2 | tr "\n" "|" | sed_ "s/\"//g" | sed_ "s/|$//g" | tr "|" "\n")
	pagepaths=$(grep "^F1 " "${main_schematic}" | cut -d" " -f2 | tr "\n" "|" | sed_ "s/\"//g" | sed_ "s/|$//g" | tr "|" "\n")

	IFS=$'\n'
	n=0
	for pagename in $pagenames; do

		n=$((n+1))

		pagename=$(echo "$pagename" | sed_ "s/^ //g" | sed_ "s/ $//g")
		pagepath=$(echo "$pagepaths" | sed_ -n ${n}p)

		page="${pagename}|${pagepath}"
		pages="${pages}\n${page}"

	done

	echo -e "$pages"
}

insert_commits()
{
	html="$1"
	commits="$2"
	project="$3"

	# GIT COMMITS FORMAT
	#
	# fcd81ef | 2021-01-22 17:21:39 -0300 | Leandro Heck | Initial version
	# d20b900 | 2021-01-22 16:59:29 -0300 | Leandro Heck | Initial commit

	n=0

	COMMITS_LIST_HTML=""

	IFS=$'\n'
	for commit in $commits; do

		hash=$(echo "$commit" | cut -d'|' -f1 | sed_ "s/^ //g" | sed_ "s/[ t]\+//g" )
		date=$(echo "$commit" | cut -d'|' -f2 | cut -d' ' -f1-2 | sed_ "s/^ //g" )
		user=$(echo "$commit" | cut -d'|' -f3 | sed_ "s/^ //g" )
		 msg=$(echo "$commit" | cut -d'|' -f4 | sed_ "s/^ //g" )

		# check for changes in .sch files
		if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${project}" | cat | grep -s ".sch" &> /dev/null; then
			sch_icon='<span class="iconify" style="width: 14px; height: 14px; color: #A6E22E;" data-icon="carbon:schematics" data-inline="false"></span>'
		fi

		# check for changes in .kicad_pcb files
		if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${project}" | cat | grep -s ".kicad_pcb" &> /dev/null; then
			layout_icon='<span class="iconify" style="width: 14px; height: 14px; color: #F92672;" data-icon="codicon:circuit-board" data-inline="false"></span>'
		fi

		# Check for changes in textual files only
		if git log --name-only --pretty='format:' -1 -U "${hash}" -- "${project}" | cat | grep -s -vE ".sch|.kicad_pcb" &> /dev/null; then
			text_icon='<span class="iconify" style="width: 14px; height: 14px; color: #888888;" data-icon="bi:file-earmark-text" data-inline="false"></span>'
		fi

		if [[ $n == 0 ]] || [[ $n == 1 ]]; then
			checked="checked='checked'"
		else
			checked=""
		fi

		read -r -d '' COMMIT_HTML <<-EOM
		    <input class="chkGroup" type="checkbox" id="${hash}" name="commit" value="${hash}" ${checked} onchange="update_commits()"/>
		    <label class="text-sm-left list-group-item" for="${hash}">
		      <table style="width:100%">
		        <tr>
		          <td rowspan=2 style="vertical-align: top; width: 1.8em;">
		              <svg viewBox="0 0 15 15" fill="none" xmlns="http://www.w3.org/2000/svg" width="15" height="15">
		                  <path d="M7.5 10.5a3 3 0 010-6m0 6a3 3 0 000-6m0 6V15m0-10.5V0" stroke="currentColor"></path>
		              </svg>
		            </td>
		          <td><em class="text-info"style="">${msg}</em></td>
		        </tr>
		        <tr>
		          <td><span class="text-success text-uppercase font-weight-normal">${hash}</span> <span class="text-muted"> | ${date} | ${user} | </span> ${sch_icon} ${layout_icon} ${text_icon}</td>
		        </tr>
		      </table>
		    </label>
		EOM

		n=$((n+1))

		COMMITS_LIST_HTML="${COMMITS_LIST_HTML}${COMMIT_HTML}"

	done

	contents=$(<"$html")
	new_contents=${contents//"<!-- FILL_COMMITS_HERE -->"/${COMMITS_LIST_HTML}}
	printf '%s' "$new_contents" > "$html"
}

insert_pages()
{
	html="$1"
	pages="$2"

	# FORMAT
	# pagename|pagepath.sch

	n=0

	PAGES_LIST_HTML=""

	IFS=$'\n'
	for page in $pages; do

		page_name=$(echo "$page" | cut -d'|' -f1 | sed_ "s/[ \t]\+//g")
		page_filename=$(  echo "$page" | cut -d'|' -f2 | sed_ "s/[ \t]\+//g" | sed_ "s/.sch//g")

		if [[ $n == 0 ]]; then
			checked="checked='checked'"
		else
			checked=""
		fi

		read -r -d '' PAGE_HTML <<-EOM
			<input type="radio" id="${page_filename}" value="${page_filename}" name="pages" ${checked} onchange="change_page()"/>
			<label class="rounded text-sm-left list-group-item radio-box" for="${page_filename}">
			<span style="margin-left:0.5em; margin-right:0.1em;" class="iconify" data-icon="gridicons:pages" data-inline="false"></span>
			${page_name}
			</label>
		EOM

		n=$((n+1))

		PAGES_LIST_HTML="${PAGES_LIST_HTML}${PAGE_HTML}"

	done

	contents=$(<"$html")
	new_contents=${contents//"<!-- FILL_PAGES_HERE -->"/${PAGES_LIST_HTML}}
	printf '%s' "$new_contents" > "$html"
}

insert_layers()
{
	html="$1"

	# Hardcoded list of layers now
	# layers="$2"
	read -r -d '' layers <<-EOM
	F_Cu
	In1_Cu
	In2_Cu
	In3_Cu
	In4_Cu
	B_Cu
	F_Adhes
	B_Adhes
	F_Paste
	B_Paste
	F_SilkS
	B_SilkS
	F_Mask
	B_Mask
	Dwgs_User
	Cmts_User
	Eco1_User
	Eco2_User
	Edge_Cuts
	Margin
	F_CrtYd
	B_CrtYd
	F_Fab
	B_Fab
	EOM

	n=0

	LAYERS_LIST_HTML=""

	IFS=$'\n'
	for layer in $layers; do

		# Replace "." with "_"
		# layer=$(sed_ "s/\./_/g" <<< "${layer}")

		case $layer in
			F*Cu*)      layer_color="#952927" ;;
			B*Cu*)      layer_color="#359632" ;;
			In1*Cu*)    layer_color="#C2C200" ;;
			In2*Cu*)    layer_color="#C200C2" ;;
			In3*Cu*)    layer_color="#C20000" ;;
			In4*Cu*)    layer_color="#0000C2" ;;
			F*Mask*)    layer_color="#943197" ;;
			B*Mask*)    layer_color="#943197" ;;
			F*SilkS*)   layer_color="#339697" ;;
			B*SilkS*)   layer_color="#481649" ;;
			Edge_Cuts*) layer_color="#C9C83B" ;;
			Margin*)    layer_color="#D357D2" ;;
			Dwgs*User*) layer_color="#0364D3" ;;
			Cmts*User*) layer_color="#7AC0F4" ;;
			Eco1*User*) layer_color="#008500" ;;
			F*Fab*)     layer_color="#C2C200" ;;
			B*Fab*)     layer_color="#858585" ;;
			F*Adhes*)   layer_color="#A74AA8" ;;
			B*Adhes*)   layer_color="#3545A8" ;;
			F*CrtYd*)   layer_color="#A7A7A7" ;;
			B*CrtYd*)   layer_color="#D3D04B" ;;
			*)          layer_color="" ;;
		esac

		if [[ "$n" == "0" ]]; then
			checked="checked='checked'"
		else
			checked=""
		fi

		read -r -d '' LAYER_HTML <<-EOM
			<input type="radio" id="${layer}" name="layers" value="${layer}" ${checked}  onchange="change_layer()"/>
			<label class="rounded text-sm-left list-group-item radio-box" for="${layer}">
				<span style="margin-left:0.5em; margin-right:0.1em; color: ${layer_color}" class="iconify" data-icon="teenyicons-square-solid" data-inline="false"></span>
				${layer}
			</label>
		EOM

		n=$((n+1))

		LAYERS_LIST_HTML="${LAYERS_LIST_HTML}${LAYER_HTML}"

	done

	contents=$(<"$html")
	new_contents=${contents//"<!-- FILL_LAYERS_HERE -->"/${LAYERS_LIST_HTML}}
	printf '%s' "$new_contents" > "$html"
}

show_commits()
{
	commits="$1"

	IFS=$'\n'
	for commit in $commits; do
		echo "$commit"
	done
}

fix_urls_multi_project()
{
	html_file=$1
	project=$2

	sed_ -i "s|/web/main.html|/$project/web/main.html|g" "$html_file"
}

generate_comparisons()
{
	script_path=$1
	kicad_pcb=$2
	project_path=$3

	filename=$(basename -- "$kicad_pcb")
	# extension="${filename##*.}"
	board_name="${filename%.*}"

	if [[ "$project_path" == "" ]]; then
		project_path="./"
		output_folder="./kidiff"
	else
		output_folder="../kidiff/$project_path"
	fi

	if [[ "$REMOVE_KDIFF_FOLDER" == "1" ]]; then
		rm -rf "${output_folder}"
		rm -rf kidiff
	fi

	mkdir -p "${output_folder}/web/"
	mkdir -p "${output_folder}/diff/"

	sch_files=$(find_ -name "*.sch")

	if [[ "$ALL_COMMITS" == "1" ]]; then
		commits=$(git log --date=local '--pretty=format:%h | %ai | %an | %s' -- "${project_path}")
	else
		commits=$(git log --date=local '--pretty=format:%h | %ai | %an | %s' -- "${project_path}/${kicad_pcb}" "${sch_files}")
	fi

	a=$(echo "$commits" | tac_ | cut -d' '  -f1);
	b=$a

	na=$(echo "$a" | wc -w)
	nb=$(echo "$b" | wc -w)
	nab=$(echo "${na} * (${nb} - 1) " | bc)

	echo
	echo "Generating artifacts for ${na} commits, (total ${nab} comparisons)"
	echo

	n=0

	IFS=$'\n'
	for i in $a; do

		k=0

		for j in $b; do

			if [[ "$i" != "$j" ]]; then

				k=$((k+1))
				n=$((n+1))

				if [[ -d "${output_folder}/$j" ]]; then
					skipping=", skipping..."
				else
					skipping=""
				fi

				if [[ $k == 1 ]]; then
					printf "%4d. %s - %s%s\n" "$n" "$i" "$j" "$skipping"
				else
					printf "%4d. %s - %s%s \n" "$n" "       " "$j" "$skipping"
				fi


				# Check if diff file exists
				if [[ -d "${output_folder}/$j" ]]; then
					continue
				fi

				mkdir -p "${output_folder}/$i/"
				mkdir -p "${output_folder}/$j/"

				# ====

				cmd="kidiff $kicad_pcb --webserver-disable -a $i -b $j > /dev/null"
				if [[ "$VERBOSE" == "1" ]]; then
					echo
					echo "$cmd"
				fi
				if [[ "$DRY_RUN" == "0" ]]; then
					eval "$cmd"
				fi

				if [ -f "${output_folder}/diff.txt" ]; then
					mv -f "${output_folder}/diff.txt" "${output_folder}/diff/$i-$j.txt"
				fi

				# ====

				# Create blank images by default
				# IFS=$'\n'
				# for sch in $sch_files; do
				# 	sch_board_name=$(sed_ "s/.sch//g" <<< "${sch}" | sed_ "s|./||g")
				# 	cp -f "${script_path}/blank.svg" "sch-${sch_board_name}.svg"
				# 	cp -f "${script_path}/blank.svg" "sch-${sch_board_name}.svg"
				# done

				REMOVED="FF0000"
				ADDED="008FFF"
				UNCHANGED="FFFFFF"
				BACKGROUND="222222"

				# Custom version does not use -kidiff
				cmd="plotgitsch -l ${board_name}-cache.lib -c ${REMOVED}:${ADDED}:${UNCHANGED}:${BACKGROUND} ${i} ${j} > /dev/null"
				if [[ "$VERBOSE" == "1" ]]; then
					echo "$cmd"
					echo
				fi
				if [[ "$DRY_RUN" == "0" ]]; then
					eval "$cmd"
				fi

				for sch_page_svg in *.svg; do

					# Background transparent
					sed_ -i 's/fill="#222222"/fill="#22222200"/g' "$sch_page_svg"
					sed_ -i 's/fill="#FFFFFF"/fill="#FFFFFF00"/g' "$sch_page_svg"

					# Elements in black
					sed_ -i 's/fill="#FF0000"/fill="#000000FF"/g' "$sch_page_svg"
					sed_ -i 's/fill="#00FF00"/fill="#000000FF"/g' "$sch_page_svg"
					sed_ -i 's/stroke="#800000"/stroke="#000000FF"/g' "$sch_page_svg"

					case "$sch_page_svg" in

						# Normalize image names removing "1" and "2" and move image to is commit folder

						sch1-*)
							new_sch_name=${sch_page_svg//sch1/sch}
							mv -f "$sch_page_svg" "${output_folder}/$i/${new_sch_name}" 2> /dev/null
							;;

						sch2-*)
							new_sch_name=${sch_page_svg//sch2/sch}
							mv -f "$sch_page_svg" "${output_folder}/$j/${new_sch_name}" 2> /dev/null
							;;
					esac
				done
			fi
		done
	done

	# Copy assets
	cp -f "${script_path}/main.html" "${output_folder}/web/main.html"
	cp -f "${script_path}/kdiff.js"  "${output_folder}/web/"
	cp -f "${script_path}/kdiff.css" "${output_folder}/web/"
	cp -f "${script_path}/blank.svg" "${output_folder}/web/"

	# Insert commits list
	insert_commits "${output_folder}/web/main.html" "$commits" "$project_path"

	# Insert pages list
	pages=$(get_pages "${board_name}" "${board_name}.sch")
	insert_pages "${output_folder}/web/main.html" "$pages"

	# Update board title
	title=$(grep -i "(title " -R "${kicad_pcb}" | cut -d"\"" -f 2)
	if [[ $title == "" ]]; then
		title="~ Missing Title ~";
	fi
	sed_ -i "s|\[PROJECT_TITLE\]|${title}|g" "${output_folder}/web/main.html"

	# Update board name
	sed_ -i "s|var board_name =.*|var board_name = \"${board_name}\"; // generated by kdiff script |g" "${output_folder}/web/kdiff.js"

	commit1=$(echo "$commits" | head -n1 | tail -n1 | cut -d" " -f1)
	commit2=$(echo "$commits" | head -n2 | tail -n1 | cut -d" " -f1)

	# Update initial schematic images
	sed_ -i "s|\[INITIAL_COMMIT_1_SCH\]|../${commit1}/sch-${board_name}.svg|g" "${output_folder}/web/main.html"
	sed_ -i "s|\[INITIAL_COMMIT_2_SCH\]|../${commit2}/sch-${board_name}.svg|g" "${output_folder}/web/main.html"

	# Update initial layout images
	sed_ -i "s|\[INITIAL_COMMIT_1_PCB\]|../${commit1}/${board_name}-F_Cu.svg|g" "${output_folder}/web/main.html"
	sed_ -i "s|\[INITIAL_COMMIT_2_PCB\]|../${commit2}/${board_name}-F_Cu.svg|g" "${output_folder}/web/main.html"

	# Update initial commit legend
	sed_ -i "s|\[COMMIT_1_HASH\]|${commit1}|g" "${output_folder}/web/main.html"
	sed_ -i "s|\[COMMIT_2_HASH\]|${commit2}|g" "${output_folder}/web/main.html"

	# Insert layers list
	board_layers=$(sed_ -n '/^  (layers/,/  )$/{/^  (layers/!{/  )$/!p}}' "${kicad_pcb}" | sed_ "s/^[ \t]\+//g" | sed_ "s/[()]//g" | cut -d" " -f2)
	insert_layers "${output_folder}/web/main.html" "$board_layers"
}


# ====================================================================
# ====================================================================


script=$(readlink_ "$0")
script_path=$(dirname "$script")

# Make sure gitplotsch is in the PATH
eval "$(opam config env)"

trap ctrl_c INT

ALL_COMMITS=0
REMOVE_KDIFF_FOLDER=0
VERBOSE=0
DRY_RUN=0

COMMIT_A=
COMMIT_B=

while [[ $# -gt 0 ]]
do
	key="$1"

	case $key in
	    -a)
	        ALL_COMMITS=1
	        shift
	        ;;

	    -r)
	        REMOVE_KDIFF_FOLDER=1
	        shift
	        ;;

	    -p)
	        project_folder="$2"
	        shift
	        shift
	        ;;

	    -v)
	        VERBOSE=1
	        shift
	        ;;

	    -d)
	        VERBOSE=1
	        DRY_RUN=1
	        shift
	        ;;

	    -c)
	        echo "-c flag is not implemented yet"
	        exit

	        COMMIT_A=$2
	        COMMIT_B=$3
	        shift
	        shift
	        shift
	        ;;

		-h)
			show_help
			exit 1
			;;

	    *)
	        kicad_pcb="$1"
	        shift # past argument
	        ;;
	esac
done

if [[ -f "$kicad_pcb" ]]; then
	generate_comparisons "$script_path" "$kicad_pcb" "$project_folder"
else
	echo "The board $kicad_pcb does not exit"
	exit 1
fi

if [[ "$DRY_RUN" == "0" ]]; then
	echo
	xdg-open_ "${output_folder}/web/main.html"
fi
